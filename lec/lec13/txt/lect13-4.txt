Another Example Using Lambdas and Java 8 "Function" Types

   This idea of having an anonymous class be a "function" that we use to manipulate some data shows up everywhere in the Java API starting with Java 8.
   This let's us shorten the code significantly.

   We looked at the forEachRemaining method of Iterator.
    This method takes a Consumer: an interface with a single method that implements a function that returns void and does something to the data.

   We used this to apply values to all the employees in a linked list of employees.

   For example, suppose we want to set every hourly employee in a linked list to have the same minimum wage:

	LinkedList<HourlyEmployee> list = new LinkedList<>();

	// ... fill the linked list with your employees 

	Iterator<HourlyEmployee> it = list.iterator();     // gets the iterator

	it.forEachRemaining(e -> e.setHourlyRate(9.75)); 

    Notice the use of the lambda syntax.  It creates an anonymous class that take an HourlyEmployee and sets its hourly rate to 9.75.
     By calling it.forEachRemaining with this anonymous class, Java will use this anonymous class on every HourlyEmployee in the linked list.


    The Consumer interface has a default method andThen which takes another Consumer.  This let's us chain operations.
    For example, let's set the minimum wage and then set everyone's hours worked:

	LinkedList<HourlyEmployee> list = new LinkedList<>();

	// ... fill the linked list with your employees 

	Iterator<HourlyEmployee> it = list.iterator();     // gets the iterator
        Consumer<HourlyEmployee> setMinRate = e -> e.setHourlyRate(9.75);

	it.forEachRemaining(setMinRate.andThen(e -> e.setHoursWorked(37)));

     Let's have it first set the minimum rate, then set the hours worked, and then raises their hourly rate by .50. 

	it.forEachRemaining(setMinRate.andThen(e -> e.setHoursWorked(37)).andThen(e -> e.setHourlyRate(e.getHourlyRate() + 0.50)));

     A comment at the end was about whether this was going to be easy for someone to read.
     To help, you can place the actions on different lines:

	it.forEachRemaining(setMinRate.andThen(e -> e.setHoursWorked(37))
                                      .andThen(e -> e.setHourlyRate(e.getHourlyRate() + 0.50)));
